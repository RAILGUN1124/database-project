CREATE TABLE Customer (
  tax_id    VARCHAR(9)  NOT NULL,
  cname     VARCHAR(50),
  state     VARCHAR(2),
  phone_num VARCHAR(12) NOT NULL UNIQUE,
  email_add VARCHAR(50) NOT NULL UNIQUE,
  username  VARCHAR(50) NOT NULL UNIQUE,
  password  VARCHAR(50) NOT NULL,
  PRIMARY KEY (tax_id)
);

CREATE TABLE Market_Account (
  m_acc_id         VARCHAR(3) NOT NULL,
  balance          REAL        NOT NULL,
  thousand_flag INTEGER     NOT NULL,
  PRIMARY KEY (m_acc_id)
);

CREATE TABLE Stock_Account (
  s_acc_id         VARCHAR(3) NOT NULL,
  stock_symbol     VARCHAR(3)  NOT NULL,
  share            REAL        NOT NULL,
  PRIMARY KEY (s_acc_id)
);

CREATE TABLE Has_Account (
  tax_id   VARCHAR(9) NOT NULL,
  m_acc_id VARCHAR(3),
  s_acc_id VARCHAR(3),
  PRIMARY KEY (tax_id, s_acc_id),
  FOREIGN KEY (m_acc_id) REFERENCES Market_Account (m_acc_id),
  FOREIGN KEY (s_acc_id) REFERENCES Stock_Account (s_acc_id)
);

CREATE TABLE Transaction (
  transaction_id  VARCHAR(20) NOT NULL UNIQUE,
  tax_id          VARCHAR(9) NOT NULL,
  date_            VARCHAR(8)  NOT NULL,
  type            VARCHAR(20) NOT NULL,
  m_acc_id        VARCHAR(3),
  s_acc_id        VARCHAR(3),
  stock_symbol    VARCHAR(3),
  amount          REAL        NOT NULL,
  current_balance REAL        NOT NULL,
  PRIMARY KEY (transaction_id),
  FOREIGN KEY (tax_id) REFERENCES Customer (tax_id),
  FOREIGN KEY (m_acc_id) REFERENCES Market_Account (m_acc_id),
  FOREIGN KEY (s_acc_id) REFERENCES Stock_Account (s_acc_id),
  FOREIGN KEY (stock_symbol) REFERENCES Stock (stock_symbol)
);

CREATE TABLE Has_Contract (
  stock_symbol VARCHAR(3)  NOT NULL,
  aname        VARCHAR(20) NOT NULL,
  title        VARCHAR(50) NOT NULL,
  year         VARCHAR(4)  NOT NULL,
  PRIMARY KEY (title, year),
  FOREIGN KEY (title, year) REFERENCES Movie_Contract (title, year),
  FOREIGN KEY (stock_symbol, aname) REFERENCES Actor (stock_symbol, aname)
    ON DELETE CASCADE
);

CREATE TABLE Stock (
  stock_symbol  VARCHAR(3) NOT NULL UNIQUE,
  closing_price REAL,
  current_price REAL,
  PRIMARY KEY (stock_symbol)
);

CREATE TABLE Actor (
  stock_symbol VARCHAR(3)  NOT NULL UNIQUE,
  aname        VARCHAR(50) NOT NULL,
  DOB          VARCHAR(8)  NOT NULL,
  PRIMARY KEY (stock_symbol, aname)
);

CREATE TABLE Movie_Contract (
  title VARCHAR(50) NOT NULL,
  role  VARCHAR(50) NOT NULL,
  year  VARCHAR(4)  NOT NULL,
  value REAL        NOT NULL,
  PRIMARY KEY (title, year)
);

CREATE TABLE Date_ (
  id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  date VARCHAR2(8) NOT NULL,
  PRIMARY KEY (id)
);
CREATE TABLE Daily_Balance (
  m_acc_id VARCHAR(3) NOT NULL,
  date_     VARCHAR(8)  NOT NULL,
  month    VARCHAR(8)  NOT NULL,
  balance  REAL        NOT NULL,
  PRIMARY KEY (m_acc_id, date),
  FOREIGN KEY (m_acc_id) REFERENCES Market_Account (m_acc_id)
);
CREATE TABLE Review (
    review_id INT PRIMARY KEY,
    movie_title VARCHAR(50) NOT NULL,
    movie_year VARCHAR(4) NOT NULL,
    review_text VARCHAR(255),
    FOREIGN KEY (movie_title, movie_year) REFERENCES Movie(title, year)
    ON DELETE CASCADE
);
CREATE SEQUENCE review_id_seq;
CREATE OR REPLACE TRIGGER review_id_trigger
BEFORE INSERT ON Review
FOR EACH ROW
BEGIN
    SELECT review_id_seq.NEXTVAL
    INTO   :new.review_id
    FROM   dual;
END;
CREATE TABLE Movie (
  title VARCHAR(50) NOT NULL,
  year VARCHAR(4)  NOT NULL,
  rank VARCHAR(20) NOT NULL,
  PRIMARY KEY (title, year)
);